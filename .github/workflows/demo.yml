name: actions-demo

# Controls when the action will run. 
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Run jobs sequentially or in parallel
jobs:
  init:
    name: Configure context and vars
    runs-on: ubuntu-latest

    steps:
      # Examine the context passed from github
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      # Checks-out your repository under $GITHUB_WORKSPACE
      - uses: actions/checkout@v2

      # Set variables for later use
      - name: Declare Variables
        id: vars
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "##[set-output name=git_sha;]$(git rev-parse --short HEAD)"
          echo "##[set-output name=git_user;]$(echo ${{ toJson(github.event.head_commit.committer.email) }})"

      - name: Echo Variables
        run: |
          echo "branch: ${{ steps.vars.outputs.branch }}"
          echo "git-sha: ${{ steps.vars.outputs.git_sha }}"
          echo "git_user: ${{ steps.vars.outputs.git_user }}"

  test:
    name: Unit Test & Configuration
    needs: init
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Run side-car docker container (e.g. how severn-api uses it)
    services:
      dynamodb:
        image: docker://amazon/dynamodb-local:1.13.4
        ports:
          - 8000:8000

    # Sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2

      # Create python env
      - name: Install Python 3
        uses: actions/setup-python@v2
        with:
          python-version: 3.6

      # Install dependencies to use
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Runs a set of commands using the runners shell
      - name: Run Tests & Coverage
        env:
          AWS_ACCESS_ID: ${{ secrets.AWS_ACCESS_ID }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
        run: |
          echo Running tests...
          nosetests test/ --with-coverage --cover-package=demo --cover-inclusive --cover-tests --cover-html --cover-html-dir=./coverage

  build:
    # we need test to pass before building
    name: Build & Publish Docker Image
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Set variables for later use
      - name: Declare Variables
        id: vars
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "##[set-output name=git_sha;]$(git rev-parse --short HEAD)"
          echo "##[set-output name=git_user;]$(echo ${{ toJson(github.event.head_commit.committer.email) }})"

      # Create QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      # Create Docker Buildx CLI tool
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Login to DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          # Secrets stored at the directory level
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build image from local Dockerfile and upload to DockerHub
      - name: Build and Push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            laffeychris/demo_image:latest
            laffeychris/demo_image:${{ steps.vars.outputs.git_sha }}

      # Echo image name after build
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
